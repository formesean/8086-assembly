;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Wed Oct 9 2024
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

DATA SEGMENT
   PORTA EQU 0F0H
   PORTB EQU 0F2H
   PORTC EQU 0F4H
   COM_REG EQU 0F6H
DATA ENDS


CODE    SEGMENT PUBLIC 'CODE'
        ASSUME CS:CODE
	MOV AX, DATA
	MOV DS, AX
	
	ORG 0000H

START:
   MOV DX, COM_REG 
   MOV AL, 10001001B
   OUT DX, AL
   
   CALL INIT_LCD;
   
   MOV AL, 0C7H ; move cursor to 8th column of 2nd line
   CALL INST_CTRL ; send instruction to LCD
   
   CALL CHECK_DAVBL


   ; MODULE: Check DAVBL
   CHECK_DAVBL:
      MOV DX, PORTC ; set port of DAVBL(PORTC)
      IN AL, DX ; read PORTC
      TEST AL, 10H ; check if DAVBL is high
      JZ CHECK_DAVBL ; if low then check again
      IN AL, DX ; read 4-bit keypad data
      AND AL, 0FH ; mask upper nibble
      CMP AL, 00H ; check if key pressed is 1 (00H)
      JE D1 ; display 1
      CMP AL, 01H ; check if key pressed is 2 (01H)
      JE D2 ; display 2
      CMP AL, 02H ; check if key pressed is 3 (02H)
      JE D3 ; display 3
      CMP AL, 04H ; check if key pressed is 4 (04H)
      JE D4 ; display 4
      CMP AL, 05H ; check if key pressed is 5 (05H)
      JE D5 ; display 5
      CMP AL, 06H ; check if key pressed is 6 (06H)
      JE D6 ; display 6
      CMP AL, 08H ; check if key pressed is 7 (08H)
      JE D7 ; display 7
      CMP AL, 09H ; check if key pressed is 8 (09H)
      JE D8 ; display 8
      CMP AL, 0AH ; check if key pressed is 9 (0AH)
      JE D9 ; display 9
      CMP AL, 0CH ; check if key pressed is * (0CH)
      JE D_ASTERISK ; display *
      CMP AL, 0DH ; check if key pressed is 0 (0DH)
      JE D0 ; display 0
      CMP AL, 0EH ; check if key pressed is # (0EH)
      JE D_POUND ; display #
      CALL DELAY_1MS
      JMP CHECK_DAVBL

   ; MODULES to display the keypad key pressed 
   D1: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '1' ; display ‘1‘
      JMP CONT
   D2: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '2' ; display ‘2‘
      JMP CONT
   D3: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '3' ; display ‘3‘
      JMP CONT
   D4: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '4' ; display ‘4‘
      JMP CONT
   D5: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '5' ; display ‘5‘
      JMP CONT
   D6: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '6' ; display ‘6‘
      JMP CONT
   D7: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '7' ; display ‘7‘
      JMP CONT
   D8: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '8' ; display ‘8‘
      JMP CONT
   D9: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '9' ; display ‘9‘
      JMP CONT
   D0: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '0' ; display ‘0‘
      JMP CONT
   D_ASTERISK: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '*' ; display ‘*‘
      JMP CONT
   D_POUND: 
      MOV AL, 0CAH 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      MOV AL, '#' ; display ‘#‘
      JMP CONT

   CONT:
      CALL DATA_CTRL
      CALL DELAY_1MS
      JMP CHECK_DAVBL

   ; MODULE: Endless loop
   ENDLESS:
   JMP ENDLESS
      
   INST_CTRL:
      PUSH AX ; preserve value of AL
      MOV DX, PORTA ; set port of LCD data bus (PORTA)
      OUT DX, AL ; write data in AL to PORTA
      MOV DX, PORTB ; set port of LCD control lines (PORTB)
      MOV AL, 02H ; E=1, RS=0 (access instruction reg)
      OUT DX, AL ; write data in AL to PORTB
      CALL DELAY_1MS ; delay for 1 ms
      MOV DX, PORTB ; set port of LCD control lines (PORTB)
      MOV AL, 00H ; E=0, RS=0
      OUT DX, AL ; write data in AL to PORTB
      POP AX ; restore value of AL
   RET

   DATA_CTRL:
      PUSH AX ; preserve value of AL
      MOV DX, PORTA ; set port of LCD data bus (PORTA)
      OUT DX, AL ; write data in AL to PORTA
      MOV DX, PORTB ; set port of LCD control lines (PORTB)
      MOV AL, 03H ; E=1, RS=1 (access data register)
      OUT DX, AL ; write data in AL to PORTB
      CALL DELAY_1MS ; delay for 1 ms
      MOV DX, PORTB ; set port of LCD control lines (PORTB)
      MOV AL, 01H ; E=0, RS=1
      OUT DX, AL ; write data in AL to PORTB
      POP AX ; restore value of AL
   RET

   INIT_LCD:
      MOV AL, 38H ; 8-bit interface, dual-line display
      CALL INST_CTRL ; write instruction to LCD
      MOV AL, 08H ; display off, cursor off, blink off
      CALL INST_CTRL ; write instruction to LCD
      MOV AL, 01H ; clear display
      CALL INST_CTRL ; write instruction to LCD
      MOV AL, 06H ; increment cursor, display shift off
      CALL INST_CTRL ; write instruction to LCD
      MOV AL, 0CH ; display on, cursor off, blink off
      CALL INST_CTRL ; write instruction to LCD
   RET

   DELAY_1MS:
      MOV BX, 02CAH
   L1:
      DEC BX
      NOP
      JNZ L1
      RET
   RET

EXIT:
   CODE ENDS 
   END START
